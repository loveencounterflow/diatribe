{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n'use strict'\n\n#===========================================================================================================\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'diatribe'\n{ rpr\n  inspect\n  echo\n  reverse\n  bold\n  log     }               = GUY.trm\n#...........................................................................................................\nCLK                       = require '@clack/prompts'\nPATH                      = require 'node:path'\nmark                      = ( ref ) -> urge reverse bold \" #{ref} \"\nE                         = require './errors'\ninvalid                   = Symbol 'invalid'\n\n\n#===========================================================================================================\nclass Interactive_dialog\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ->\n    @cfg        = Object.freeze { unique_refs: true, } ### TAINT make configurable ###\n    @_pc        = -1\n    @results    = {}\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _record: ( cfg, value ) ->\n    @_pc++\n    ref = cfg?.ref ? \"$q#{@_pc + 1}\"\n    #.......................................................................................................\n    if @cfg.unique_refs and Reflect.has @results, ref\n      message = \"duplicate ref: #{ref}\"\n      throw new E.Dulicate_ref_error message\n    #.......................................................................................................\n    @results[ ref ]     = value\n    return value\n\n  #---------------------------------------------------------------------------------------------------------\n  ctrlc: ( value ) ->\n    if CLK.isCancel value\n      CLK.cancel \"Operation cancelled.\"\n      @process_exit 0\n    return value\n\n  #---------------------------------------------------------------------------------------------------------\n  intro:        ( cfg ) ->                @ctrlc await CLK.intro       cfg\n  outro:        ( cfg ) ->                @ctrlc await CLK.outro       cfg\n  confirm:      ( cfg ) -> @_record cfg,  @ctrlc await CLK.confirm     cfg\n  text:         ( cfg ) -> @_record cfg,  @ctrlc await CLK.text        cfg\n  select:       ( cfg ) -> @_record cfg,  @ctrlc await CLK.select      cfg\n  multiselect:  ( cfg ) -> @_record cfg,  @ctrlc await CLK.multiselect cfg\n  get_spinner:  ( cfg ) -> CLK.spinner()\n  finish:               -> null\n\n  #---------------------------------------------------------------------------------------------------------\n  process_exit: ( code = 0 ) -> process.exit code\n\n\n#===========================================================================================================\nclass Programmatic_dialog\n\n  #---------------------------------------------------------------------------------------------------------\n  @invalid = invalid\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( exp_steps ) ->\n    @cfg            = Object.freeze { unique_refs: true, } ### TAINT make configurable ###\n    @exp_steps      = @_compile_steps exp_steps\n    @_pc            = -1\n    @act_steps      = []\n    @results        = {}\n    # @finished       = false\n    @overrun        = false\n    @invalid        = invalid\n    #.......................................................................................................\n    GUY.props.def @, '_failures',\n      enumerable:   false\n      configurable: false\n      get:          -> ( step for step in @act_steps when step instanceof E.Dialog_failure )\n    #.......................................................................................................\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_steps: ( exp_steps ) ->\n    ### TAINT validate properly ###\n    # unless Array.isArray exp_steps\n    #   throw new Error \"expected `exp_steps` to be a list, got #{rpr exp_steps}\"\n    #.......................................................................................................\n    R = []\n    for { ref, modal, answer, } in exp_steps\n      ref    ?= null\n      modal  ?= null\n      answer ?= null\n      ### TAINT use method to instantiate ###\n      R.push Object.freeze { ref, modal, answer, }\n    return Object.freeze R\n\n  #---------------------------------------------------------------------------------------------------------\n  _next: ( ref ) ->\n    @_pc++\n    if @_pc >= @exp_steps.length\n      message = \"emergency halt, running too long: act #{@_count_act_steps()} exp #{@exp_steps.length}\"\n      @_fail ref, new E.Overrun_failure message\n      return null\n      # throw new E.Overrun_error message\n    return @exp_steps[ @_pc ]\n\n  #---------------------------------------------------------------------------------------------------------\n  _fail: ( ref, failure ) ->\n    @act_steps.push failure\n    @overrun = true if failure instanceof E.Overrun_failure\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _step: ( modal, dlg_cfg ) ->\n    return ( await GUY.async.defer -> invalid ) if @overrun\n    act_ref = dlg_cfg.ref ? \"$q#{@_pc + 2}\"\n    #.......................................................................................................\n    if @cfg.unique_refs and Reflect.has @results, act_ref\n      message = \"duplicate ref: #{act_ref}\"\n      @_fail act_ref, new E.Duplicate_ref_failure message\n      throw new E.Dulicate_ref_error message\n    #.......................................................................................................\n    exp_step            = @_next act_ref\n    return ( await GUY.async.defer -> invalid ) if @overrun\n    #.......................................................................................................\n    @results[ act_ref ] = exp_step.answer\n    #.......................................................................................................\n    if act_ref is exp_step.ref\n      ### TAINT use method to instantiate step ###\n      @act_steps.push { ref: act_ref, modal, answer: exp_step.answer, }\n    else\n      @_fail act_ref, new E.Misstep_failure \"step##{@_pc}: act #{rpr act_ref}, exp #{rpr exp_step.ref}\"\n    return await GUY.async.defer -> exp_step.answer\n\n  #---------------------------------------------------------------------------------------------------------\n  _count_act_steps: -> @_pc + 1\n  _is_finished:     -> @_count_act_steps() is @exp_steps.length\n  # _is_underrun:     -> @_count_act_steps() <  @exp_steps.length\n  _is_overrun:      -> @_count_act_steps() >  @exp_steps.length\n\n  #---------------------------------------------------------------------------------------------------------\n  finish: ( P... ) ->\n    #### `dlg.finish()` should be called after the simulated dialog has ben run to issue an  ####\n    return true if @_is_finished() or @_is_overrun()\n    @_fail '$finish', new E.Underrun_failure \"finished too early: act #{@_count_act_steps()} exp #{@exp_steps.length}\"\n    return false\n\n  #---------------------------------------------------------------------------------------------------------\n  intro:        ( step_cfg )  -> null\n  outro:        ( step_cfg )  -> null\n  confirm:      ( step_cfg )  -> await @_step ( modal = 'confirm'     ),  step_cfg\n  text:         ( step_cfg )  -> await @_step ( modal = 'text'        ),  step_cfg\n  select:       ( step_cfg )  -> await @_step ( modal = 'select'      ),  step_cfg\n  multiselect:  ( step_cfg )  -> await @_step ( modal = 'multiselect' ),  step_cfg\n  get_spinner:                -> { start: ( -> ), stop: ( -> ), }\n\n  #---------------------------------------------------------------------------------------------------------\n  process_exit: ( code ) ->\n    # not really exiting the process\n    return code\n\n\n\n#===========================================================================================================\nmodule.exports = { Programmatic_dialog, Interactive_dialog, errors: E, invalid, }\n"
  ]
}